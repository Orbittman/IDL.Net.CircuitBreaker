{"name":"Idl.net.circuitbreaker","tagline":"Circuit breaker implementation using a time stamp to reset the circuit","body":"[![idl-public MyGet Build Status](https://www.myget.org/BuildSource/Badge/idl-public?identifier=95c60c91-9607-478d-b51a-679426498ab6)](https://www.myget.org/)\r\n# IDL.Net.CircuitBreaker\r\nThis is a simple circuit breaker library with the ability to maintain the state outside of the circuit class itself. This allows it to be used in an environment where multiple typed responses are required but using a single circuit state for all of them. \r\n\r\nWe needed to not have a timer that would reset the circuit but have that based on a timestamp. This way a new circuit could be interrogated at any point and evaluate it's state based on the CircuitState object that was passed to the operation excecution.\r\n\r\nThe circuit state maintains the position of the circuit Open | Half open | Closed, the current failure count and a time that the circuit is reset. \r\n\r\n````csharp\r\nvar state = new CircuitState();\r\nvar circuit = new Circuit<TResponse>(2, TimeSpan.FromSeconds(5), state);\r\n\r\nfor(int i = 0; i < 6; i++)\r\n{\r\n   try\r\n   {\r\n      circuit.Execute(() => { throw new Exception());\r\n   }\r\n   catch(CircuitOpenException)\r\n   {\r\n      Console.WriteLine(\"The circuit is now open\");\r\n   }\r\n   catch(Exception)\r\n   {\r\n      Console.WriteLine(\"The circuit is closed\");\r\n   }\r\n}\r\n````\r\nThis will output:  \r\nThe circuit is closed  \r\nThe circuit is closed\r\nThe circuit is now open  \r\n\r\nAfter 5 seconds the circuit will become 'half open' and allow one more request before entering the open state again. If the circuit operation is successful the circuit will close and the failure count reset.\r\n````c#\r\nThread.Sleep(5000);\r\nConsole.WriteLine(state.State);\r\n// outputs \"HalfOpen\"\r\n\r\ncircuit = new Circuit<string>(2, TimeSpan.FromSeconds(5), state);\r\nConsole.WriteLine(circuit.Execute(() => \"Test passed\"));\r\n// outputs \"Test passed\"\r\n\r\nConsole.WriteLine(state.State);\r\n// outputs \"Closed\"\r\n````\r\n\r\nFor asynchronous operations use\r\n````c#\r\nvar state = new CircuitState();\r\nvar circuit = new Circuit<TResponse>(2, TimeSpan.FromSeconds(5), state);\r\nvar asyncResponse = circuit.ExecuteAsync(() => Task.Run(() => {}))\r\n````\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}